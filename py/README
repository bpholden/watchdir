This is the source directory for the watchdir utility and related files.

watchdir.py is a routine that:

1) watches an input directory for new files
2) if the new file is an LRIS fits file that looks like a science frame,
   it then preps for running the XIDL routine long_reduce
   a) it finds calibration files in the calibration directory
   b) it makes an output directory
   c) it writes a plan file 
   d) it writes a small shell script to execute the IDL
3) it runs the IDL code
   a) this processes the observation with the calibrations
   b) the output is a 1-d calibrated spectrum
   c) it compares this output with a standard or fluxed observation
   d) it generates a webpage with a summary of the observation
4) when this is finished, the file is removed from the watch directory

This routine takes eight (8) arguments, which are accessible from

% watchdir.py -h
or 
% watchdir.py --help

1) the directory to watch (defaults to the current working directory)

2) the root directory to place output (defaults to LRIS_THRU, or the
   current working directory)

3) the calibration directory (defaults to the current working
   directory)

4) the ASCII file containing the list of calibrations (generated by
   make_filelist.py, defaults to calibration.list in the calibration
   directory)

5) the total number of XIDL instances to run at once (defaults to 1)

6) the directory containing the star list, this is the list of acceptable stars to use as calibration standards

7) the name of the starlist itself

8) the path of a file that contains the important environment
   variables for IDL.  An example can be found in the src directory and
   it is called "idlenv"

Dependencies:

 * External: 
   - python (>v2.3 and <=2.7)
   - pyfits see http://www.stsci.edu/resources/software_hardware/pyfits/
   - numpy
   - ephem
   - IDL
   - idlspec2d
   - idlutil
   - XIDL (see www.ucolick.org/~xavier/IDL/index.html )

 * Internal: There are a number files included in the source tree that are needed:
   - model.py
   - Planutil.py
   - Frameutil.py
   - LRISFrameutil.py
   - XIDLPlanutil.py

Virtual environments

Using a virtual envirnoment is a useful way of a python installation
that the user can control instead of relying a system level
installation of python.  

Please see the short file Running_with_a_virtualenv for more
information.